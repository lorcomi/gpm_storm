#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun Nov 26 18:29:52 2023

@author: comi
"""
import numpy as np
import pandas as pd
import somoclu
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler



file_path = '/home/comi/Projects/dataframe.parquet'

# Read the Parquet file into a DataFrame
df = pd.read_parquet(file_path)


scaler = MinMaxScaler()
df_scaled = pd.DataFrame(scaler.fit_transform(df), columns=df.columns)

# Extract the relevant features from your DataFrame
# Replace 'feature1', 'feature2', ... with the actual column names you want to use
data = df_scaled.iloc[:, :-5].values

# Define the size of the SOM grid
som_grid_size = (10, 10)  # You can adjust this based on your preference

# Initialize the SOM
som = somoclu.Somoclu(n_columns=data.shape[0], n_rows=data.shape[1], \
                      gridtype='rectangular', maptype='planar')

som.train(data=data, epochs=10, \
          radius0=0, radiusN=1, \
          scale0=0.5, scaleN=0.001)
# Train the SOM
som.train_batch(data, 10000, verbose=True)

# Function to map each data point to its corresponding cell in the SOM grid
def map_data_to_som(data):
    mappings = []
    for i in range(len(data)):
        mappings.append(som.winner(data[i]))
    return np.array(mappings)

# Map the data to SOM
mapped_data = map_data_to_som(data)

# Function to create an image for each cell in the SOM grid
# You need to replace 'your_extraction_function' with your actual image extraction function
def create_images_for_som(som, data, extraction_function):
    som_shape = som.get_weights().shape[:-1]
    images = np.empty(som_shape, dtype=object)

    for i in range(som_shape[0]):
        for j in range(som_shape[1]):
            # Extract image for each cell in the SOM
            images[i, j] = extraction_function(som.get_weights()[i, j], data)

    return images

# Replace 'your_extraction_function' with your actual image extraction function
# This function should take a weight vector and the original data and return an image
# Example: def your_extraction_function(weight, data): ... 

# Create images for each cell in the SOM grid
som_images = create_images_for_som(som, data, your_extraction_function)

# Plot the SOM grid with the corresponding images
plt.figure(figsize=(10, 10))
for i in range(som_shape[0]):
    for j in range(som_shape[1]):
        plt.subplot(som_shape[0], som_shape[1], i * som_shape[1] + j + 1)
        plt.imshow(som_images[i, j])
        plt.axis('off')
plt.show()

